<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Swift学习之路 第三弹 字符串的使用]]></title>
    <url>%2F2019%2F11%2F27%2FSwift%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E7%AC%AC%E4%B8%89%E5%BC%B9-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[字符串的使用见题知义，本篇文章统筹讲述一下字符串的使用。具体结构如下图所示，前面几部分作为了解，本文着重讲一下字符串的使用: 1、字符串的基本使用 获取字符串的长度 获取字符串的长度 分为两种：a、获取字符串的字节长度 。代码如下： 1234567func getStrByteLength(str:String) -&gt; () &#123; //1、返回指定编码对应的字节长度 print(str.lengthOfBytes(using: .utf8)) &#125; b、获取字符串长度 代码如下： 1234567func getStrLength(str:String) -&gt; () &#123; //返回字符串长度 print(str.count) &#125; 获取字符串长度也可以用NSString 来表达 ，代码如下： 123456func getStrLengthWithOC(str:String) -&gt; () &#123; //返回字符串长度 let ocStr = str as NSString print(ocStr.length) &#125; 遍历字符串 swift 中遍历字符串相对于OC中做了简化 使用起来更加方便 代码如下： 1234567func strLoop(str:String) -&gt; () &#123; for c in str &#123; print(c) &#125;&#125; 由于在学习之前不知道这个遍历 按照OC 习惯写的 比较累赘的代码，也算是一种方法，也一并粘贴在这： 12345678910func strLoop2(str:String) -&gt; () &#123; for num in 0..&lt;str.count &#123; let char:Character = str[str.index(str.startIndex, offsetBy: num)] print(char) &#125;&#125; 字符串拼接 swift 中字符串拼接字符串 直接 相加就可以了。代码如下： 12345//字符串拼接字符串func strAppendStr(str:String,str1:String) -&gt; () &#123; print(str + str1)&#125; 如果是字符串拼接其他类型 。需要将其他类型转化一下。代码如下： 12345//字符串拼接其他类型func strAppendOther(str:String,str1:Int) -&gt; () &#123; print(&quot;\(str)\(str1)&quot;) &#125; 这里需要注意 。可选类型 不能用这种方法 可选类型 需要判断下可选项是否为空 写法如下： 12345//字符串拼接 可选类型func strAppendOptional(str:String,str1:Optional&lt;Any&gt;) -&gt; () &#123; print(&quot;\(str)\(str1 ?? &quot;&quot;)&quot;) &#125; 字符串的格式化 举个栗子 ：定义一个字符串”123”, 要把它转化成02：03这种时间格式 代码如下： 1234567891011//MARK:字符串格式化func strFormat(str:String) -&gt; () &#123; //在对变量操作前添加！，表示默认为非nil，直接解包进行处理 let formatTime = String(format: &quot;%02d:%02d&quot;,Int(str)!/60,Int(str)!%60) print(formatTime) &#125; 2、字符串的截取12345/// swift提供的分割函数 /// - Parameter separator: 分割标识 /// - Parameter maxSplits: 最大分割次数，默认Int.max /// - Parameter omittingEmptySubsequences: 是否忽略空值 public func split(separator: Character, maxSplits: Int = default, omittingEmptySubsequences: Bool = default) -&gt; [Substring] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/// 截取字符串 /// - Parameter str: 字符串 /// - Parameter subStr: 子串 /// - Parameter startIndex: 截取起点索引 /// - Parameter endIndex: 截取终点索引 func separateStr(str:String,subStr:String,startIndex:Int,endIndex:Int) -&gt; () &#123; //截取从字符串尾部数 endIndex的长度的子字符串 let subsString = str.suffix(endIndex)//从后边截取 五个长度的 子字符串 print(subsString) print(&quot;-------------------&quot;) //得到一个 按&quot;四&quot;截取后的数组 //[&quot;一二三&quot;, &quot;五六七&quot;] let subString1 = str.split(separator:&quot;四&quot;) print(subString1) print(&quot;-------------------&quot;) //获取字符串第一个字符 let subStr2 = str[str.startIndex] print(subStr2) //获取字符串结尾字符 let subStr3 = str[str.endIndex] print(subStr3) print(&quot;-------------------&quot;) //获取从初始索引开始数 第4个字符 //四 let subStr4 = str[str.index(str.startIndex, offsetBy: 4)] print(subStr4) //得到一个 按&quot;九&quot;截取后的数组 忽略空值 let arraySubStr:[Substring] = str.split(separator: &quot;九&quot;) print(arraySubStr) print(&quot;-------------------&quot;) //得到一个按 &quot;三&quot; 截取后的数组 最大切割次数为1 是否忽略空值 否 //[&quot;一二&quot;, &quot;四五六七&quot;] let arraySubStr1:[Substring] = str.split(separator: &quot;三&quot;, maxSplits: 1, omittingEmptySubsequences:false) print(arraySubStr1) &#125;]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift学习系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift学习之路 第二弹 Swift中的逻辑分支]]></title>
    <url>%2F2019%2F11%2F25%2FSwift%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E7%AC%AC%E4%BA%8C%E5%BC%B9-Swift%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E5%88%86%E6%94%AF%2F</url>
    <content type="text"><![CDATA[1、逻辑分支 （if else if的使用） 举个栗子：用 if else 来描述这样一个问题：一个程序员 坐地铁上班 该如何描述？分析 ：假设 需要满足两个条件。1、是否是工作日 2、是否带地铁卡 首先,我们来判断第一个条件 ，是不是工作日。 在OC 中，写法是这样 12345if (isWorkingDay==YES) &#123; NSLog(@&quot;是工作日&quot;); &#125;else&#123; NSLog(@&quot;不是工作日&quot;); &#125; 也可以写成这样 ： 1234if (isWorkingDay==YES) NSLog(@&quot;是工作日&quot;);else NSLog(@&quot;不是工作日&quot;); 我们看到。在if 后 的条件必须加（），执行语句如果有一条的话 可以省略 {} 而在swift 中 我们这样写： 123456if isWorkingDay==true &#123; print (&quot;是工作日&quot;) &#125; else &#123; print (&quot;不是工作日&quot;) &#125; 这里 if 后的条件可以不加（） 但是有一点必须注意 ：就是 条件必须是bool 类型 另外 执行语句无论有多少个 必须加{} 那么swift 为什么要制定这样的规则 ？ 优点：1、类型安全：可以有效的限制住条件类型 防范由于类型杂乱造成的安全风险 2、避免作用域混乱：执行语句必须包含在{}内 防范由于程序员疏忽引起的作用域混乱 接下来我们扩展一下 加上第二个条件OC 代码如下： 12345678910111213141516if (isWorkingDay==YES) &#123; NSLog(@&quot;是工作日&quot;); if(isHaveCard==YES)&#123; NSLog(@&quot;带了地铁卡。去上班吧···&quot;); &#125;else&#123; NSLog(@&quot;忘带地铁卡，回家去取...&quot;); &#125; &#125;else&#123; NSLog(@&quot;不是工作日,今天不上班...&quot;);&#125; 那我们还可以怎么写？ 还可以用if else if 语句 这样写： 12345678910111213if(isWorkingDay==YES&amp;&amp;isHaveCard==YES)&#123; NSLog(@&quot;是工作日,带了地铁卡。去上班吧···&quot;); &#125;else if(isWorkingDay==YES&amp;&amp;isHaveCard==NO)&#123; NSLog(@&quot;是工作日,忘带地铁卡，回家去取...&quot;); &#125;else&#123; NSLog(@&quot;不是工作日,今天不上班...&quot;);&#125; 同样的 swift 中 if else 这样写 ： 123456789101112131415if isWorkingDay==true &#123; if isHaveCard==true &#123; print(&quot;是工作日,带了地铁卡。去上班吧···&quot;); &#125; else &#123; print(&quot;是工作日,忘带地铁卡，回家去取...&quot;); &#125; &#125;else&#123; print(&quot;不是工作日,今天不上班...&quot;);&#125; 也可以写成这样： 123456789101112if isWorkingDay==true,isHaveCard==true &#123; print(&quot;是工作日,带了地铁卡。去上班吧···&quot;); &#125; else if isWorkingDay==true,isHaveCard==false &#123; print(&quot;是工作日,忘带地铁卡，回家去取...&quot;); &#125;else&#123; print(&quot;不是工作日,今天不上班...&quot;); &#125; 整体上来看 if else if 相对来说更简洁一点我们思考这样一个问题, 如果我需要判断的条件有多个，我该怎么办？ 像这样嘛？ 1234567891011121314151617if () &#123; if () &#123; if () &#123; if () &#123; ... &#125;else&#123; ... &#125; &#125; else &#123; &#125; &#125; else &#123; &#125;&#125; else &#123; &#125; 这样虽然能达成我们最终目的，但是代码可读性非常差，递进的层级过多… swift 2.0 给出了一个guard 相对来说实现起来可读性更高一些… 2、逻辑分支（guard的使用） 还是上面的那个例子 我们要实现程序员工作日坐地铁上班的问题我们再加个条件：办公室进门要用门禁卡 用guard（guard 有守卫 /守护的意思) 语句怎么写？ 直接上代码： 12345678910111213141516171819202122232425262728 //如果条件满足 继续往下走// 如果条件不满足 走 else 分支 并且要跳出//是不是工作日 guard isWorkingDay==true else &#123; print(&quot;不是工作日，回家睡觉...&quot;) return; &#125; //是否有地铁卡 guard isHaveCard==true else &#123; print(&quot;是工作日,忘带地铁卡,回家去取...&quot;) return; &#125; //是否门禁卡 guard isHaveDoorCard==true else &#123; print(&quot;是工作日,忘带门禁卡,回家去取...&quot;) return; &#125; //满足以上三个条件 达成目标 print(&quot;是工作日,带了地铁卡。刷了门禁。去上班吧···&quot;); 三位运算符 swift 中的三位运算符 123int a = 10a &lt;= 20 ? print (&quot;1&quot;) : print (&quot;2&quot;) 3、逻辑分支 （Switch的基本使用） 还是以一个程序员工作日上班为例 。我们把工作日 分为 1，2，3，4，5 休息日为6，7 我们定义一个Int 类型的常量workDay OC 写法 如下 ： 1234567891011121314151617181920212223242526switch (workDay) &#123; case 1: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 2: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 3: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 4: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 5: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 6: NSLog(@&quot;今天是休息日,不需要上班...&quot;); break; case 7: NSLog(@&quot;今天是休息日,不需要上班...&quot;); break; default: NSLog(@&quot;今天不上班...&quot;); break;&#125; 这里 switch 后面的条件 要注意 必须加（）且 数据类型只能是整数 每条case 后面必须跟一个break 跳出当前分支 如果 不加break ,switch 会穿透当前case 条件 接着执行下一条case 利用switch的穿透性 上面的代码 也可以写成这样： 12345678910111213141516switch (workDay) &#123; case 1: case 2: case 3: case 4: case 5: NSLog(@&quot;今天是工作日,需要上班...&quot;); break; case 6: case 7: NSLog(@&quot;今天是休息日,不需要上班...&quot;); break; default://default 语句可以写在任意位置 也可以省略 NSLog(@&quot;今天不上班...&quot;); break;&#125; swift 中 的 switch 写法与OC 中的写法完全相反 。 swift中 switch 可以针对任意类型的值进行分支 ；不再局限于整数；一般不需要break;如果需要多值，可以使用”，“分隔；所有的分支至少需要一条指令； 针对 工作日上班的问题 swift中的写法如下： 12345678910//如果 workDay 为Int 类型 switch workDay &#123; case 1,2,3,4,5: print(&quot;今天是工作日，需要上班&quot;) case 6,7: print (&quot;今天是休息日，不需要上班&quot;) default: print (&quot;今天是休息日，不需要上班&quot;) &#125; 如果定义workDay 为String 类型 也可以写成这样： 12345678910//workDay 为String 类型 switch workDay &#123; case &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;: print(&quot;今天是工作日，需要上班&quot;) case &quot;6&quot;,&quot;7&quot;: print (&quot;今天是休息日，不需要上班&quot;) default: print (&quot;今天是休息日，不需要上班&quot;) &#125; 4、 逻辑分支 （Switch的特殊用法） switch的 特殊用法 在上图中已经给出了比较明确的描述 。我们仍然用工作日上班为例进行延伸，思考这样一个问题：除了上面讲的这几种方法，switch 还有什么样的写法能解决这个问题？ 可以用区间匹配… 区间匹配 我们可以把周一到周日 分成两个区间 1…5 为一个区间 定义为工作日。6…7为一个区间 定义为休息日 代码如下： 1234567891011121314func workDayWithSection(today:Int) -&gt; () &#123; let workDay = 0...5 //工作日 let freeDay = 6...7 //休息日 switch today &#123; case workDay: print(&quot;今天是工作日，需要上班&quot;) case freeDay: print(&quot;今天是休息日，不需要上班&quot;) default: print(&quot;今天是休息日，不需要上班&quot;) &#125;&#125; 元组匹配 元组匹配 我们需要换一个例子。如果继续用上面的例子就不太适用了。举个栗子： 判断一个点是否是原点/x轴上的点/y轴上的点 代码如下： 123456789101112131415161718// MARK:判断一个点是否是原点/x轴上的点/y轴上的点 func pointIsOrigin(x:Int,y:Int) -&gt; () &#123; let point = (x,y) switch point &#123; case (0,0)://原点 print(&quot;point是原点&quot;) case (0,_): print(&quot;point是x轴上的点&quot;) case (_,0): print(&quot;point是y轴上的点&quot;) default: print(&quot;point 是一个既不在x轴，也不在y轴的任意点&quot;) &#125; &#125;]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift学习系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift学习之路 第一弹 Swift的基础语法]]></title>
    <url>%2F2019%2F11%2F21%2FSwift%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E7%AC%AC%E4%B8%80%E5%BC%B9-Swift%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1、在swift 中如何导入框架 ？12在oc中 #import &quot;xxx.h&quot;在swift中 import xxx 2、定义常量和变量 修饰 定义 常量 let 定义之后不能修改 变量 var 定义之后可以修改 如果需要制定常量的类型 可以直接使用 let x:类型 =值 1let a:Int = 10 也可以这样写： 1let a = 10 如果需要定制变量的类型 可以直接使用 var x: 类型 = 值 1var a:Int = 10 也可以这样写： 1var a = 10 swift 具有一个自动推导的特性 变量/常量的类型会根据右侧的代码执行结果，推导出对应的类型如果一个变量x 从来没有修改 ，建议改为let 关于let 和var 的选择 相对来讲 不可变的会更安全 。开发的时候，通常都先使用let ,在需要变化的时候 再改成var 例如 ： 12345var x = 10 let y = 20 print(x+y) 在执行上边代码的时候， xcode 会给我们反馈一个警告 由于x 没有发生过修改 所以 修饰的时候 用 let 即可 如何修饰 修改视图属性 12let v = UIView ()v.backgroundColor=UIColor.red 定义一个view 设置view的背景颜色为红色 ，你会发现 ，这里我们用的是let 而不是var ，那么明明定义的view 属性发生变化了 ，不应该用var 修饰么 ？这里要强调一点：修改视图属性 ，仅仅修改的是视图的属性，并没有修改视图的指针地址。视图本身的指针没有发生变化 所以 用let 修饰 3、不同数据类型之间的运算 在swift 中，对类型要求异常严格。 任何不同类型的数据之间 ，不允许直接运算。不会做默认的隐式转换，所有的类型确定都要由程序员负责。另外,swift中 小数是Double 类型 精度高 等同于 oc 中的 CGFloat。不存在基本数据类型,都是结构体 12let x=10let y = 10.5 如上所示。 如果我们要计算 x+y的值 ，需要将y 转化成整数 或者 将x 转化成double 。在oc 中的写法: 123int z = x + (int)y;或CGFloat z = (CGFloat)x + y; swift中的写法 ： 123let z = x + Int(y)或let z = Double (x) + y 4、注意事项 OC Swift 必须指明常量还是变量 可以不指明类型（自动推导机制） 变量名称可以是汉字不能是Unicode字符 变量名称可以是汉字或者Unicode字符 值可以不与类型匹配 值必须和类型相匹配 不同类型可以进行运算 类型安全 必须相同类型的参数才能进行运算 5、总结]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>Swift学习系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三弹 搭建初始界面导航]]></title>
    <url>%2F2019%2F09%2F18%2F%E7%AC%AC%E4%B8%89%E5%BC%B9-%E6%90%AD%E5%BB%BA%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2%E5%AF%BC%E8%88%AA%2F</url>
    <content type="text"><![CDATA[从今天开始，以代码形式从头搭建一个基本的网页。由于是初学，所以现学现卖，学到哪里就写到哪里，初始会有很多不完善的地方，这些会一步一步在学习中慢慢完善。话不多说，进入正题… 一、网页布局网页布局有很多种方式，一般分为以下几个部分：头部区域、菜单导航区域、内容区域、底部区域。如下图所示： 二、搭建菜单导航区域目标： 菜单内容：首页、标签、分类、归档、关于 实现鼠标悬停效果 实现适配（导航标签等宽、居中） 默认选中第一个导航标签 代码 步骤：1、 创建index.html文件2、 创建style文件夹，在文件夹下创建indexStyle.css文件3、 创建js文件夹，在文件夹下创建indexJs.js文件4、 在index.html中引入indexStyle.css和indexJs.js 12&lt;link rel=&quot;stylesheet&quot; href=&quot;./style/indexStyle.css&quot;&gt; &lt;script src=&quot;./js/indexJs.js&quot;&gt;&lt;/script&gt; 5、 创建导航标签 12345678&lt;div id=&quot;nav-box&quot;&gt; &lt;!--banner部分--&gt; &lt;span id=&quot;index&quot;&gt;首页&lt;/span&gt; &lt;span id=&quot;tag&quot;&gt;标签&lt;/span&gt; &lt;span id=&quot;categories&quot;&gt;分类&lt;/span&gt; &lt;span id=&quot;achieve&quot;&gt;归档&lt;/span&gt; &lt;span id=&quot;about&quot;&gt;关于&lt;/span&gt; &lt;/div&gt; 6、 编辑CSS文件 1234567891011121314151617181920212223242526/* 伪选择器 */div &gt; span &#123; display: block; font-size: 20px; color: gray; background-color: aquamarine; width:20%; line-height: 40px; text-align: center; float: left;&#125;/* id 选择器，以 # 号开头 一个HTML中只能有一个 不能重复id */#nav-box &#123; white-space: nowrap; overflow-y: hidden; background-color:rosybrown; margin-left: 10%; margin-right: 10%; text-align: center; height: 40px;&#125; 三、 完整代码HTML文件1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge,chrome=1&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style/indexStyle.css&quot;&gt; &lt;script src=&quot;./js/indexJs.js&quot;&gt;&lt;/script&gt; &lt;title&gt;我的博客&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;title&quot;&gt;首页&lt;/h1&gt; &lt;div class=&quot;line&quot;&gt;&lt;/div&gt; &lt;div id=&quot;nav-box&quot;&gt; &lt;!--banner部分--&gt; &lt;span id=&quot;index&quot;&gt;首页&lt;/span&gt; &lt;span id=&quot;tag&quot;&gt;标签&lt;/span&gt; &lt;span id=&quot;categories&quot;&gt;分类&lt;/span&gt; &lt;span id=&quot;achieve&quot;&gt;归档&lt;/span&gt; &lt;span id=&quot;about&quot;&gt;关于&lt;/span&gt; &lt;/div&gt; &lt;div&gt; &lt;!--主体部分--&gt; &lt;/div&gt; &lt;footer&gt; &lt;div&gt; &lt;!--尾部--&gt; &lt;/div&gt; &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; CSS文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/* 清除默认边距 */* &#123; margin: 0; padding: 0;&#125;/* class选择器，经常用到 以 . 开头 */.title &#123;margin-top: 10px;margin-bottom: 10px;text-align: center;&#125;.line &#123; height: 1px; background-color: gray; margin-bottom: 2px;&#125;/* 伪选择器 */div &gt; span &#123; display: block; font-size: 20px; color: gray; background-color: aquamarine; width:20%; line-height: 40px; text-align: center; float: left;&#125;/* 修改颜色 */span:hover &#123; background-color: #ddd; color: red; &#125;/* div :first-child &#123; margin-left: 5%;&#125;div :last-child &#123; margin-right: 5%; background-color: orange;&#125; *//* id 选择器，以 # 号开头 一个HTML中只能有一个 不能重复id */#nav-box &#123; white-space: nowrap; overflow-x: scroll; overflow-y: hidden; background-color:rosybrown; margin-left: 15%; margin-right: 15%; text-align: center; height: 40px;&#125; 四、知识点1、选择器种类 id选择器id选择器可以为标有特定id的HTML 元素指定特定的样式。id 选择器以“#”来定义 12例如：#para1 &#123;text-align:center;&#125; class选择器class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示 12例如：.center &#123;text-align:center;&#125; 这里要注意：id选择器 一个HTML中 只能有一个 id作为唯一标识不能重复 class 选择器 class可以重复 扩展知识：伪选择器 鼠标悬停 改变字体 背景 123456例如：span :hover&#123;background-color:red;text-color:white&#125; 2、CSS 导入方式插入样式表的方法有三种： 外联样式表（推荐 常用） 1234例如：&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt; 内联样式（不推荐） 12例如：&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt; 内部样式表 12345678例如：&lt;head&gt;&lt;style&gt;hr &#123;color:sienna;&#125;p &#123;margin-left:20px;&#125;&lt;/style&gt;&lt;/head&gt; 优先级：内联样式&gt;内部样式&gt;外部样式&gt;浏览器默认样式 3、盒子模型CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距) - 清除内容周围的区域，内边距是透明的。 Content(内容) - 盒子的内容，显示文本和图像。 当您指定一个CSS元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。完全大小的元素，你还必须添加填充，边框和边距。 123456789101112131415例如：div &#123; width: 300px; border: 25px solid green; padding: 25px; margin: 25px; &#125;实际宽度为：300px (宽)+ 50px (左 + 右填充)+ 50px (左 + 右边框)+ 50px (左 + 右边距)= 450px 五、总结1、了解了网页基本构成2、创建了导航菜单并实现了鼠标悬停效果3、初步了解选择器种类（后续会继续补充）4、了解了CSS的三种导入方式5、了解了盒子模型的本质以及宽高计算]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>Web开发系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第二弹 建立基本网页所需要了解的基本知识]]></title>
    <url>%2F2019%2F09%2F12%2F%E7%AC%AC%E4%BA%8C%E5%BC%B9-%E5%BB%BA%E7%AB%8B%E5%9F%BA%E6%9C%AC%E7%BD%91%E9%A1%B5%E6%89%80%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[一、网页的基本构成 头部（head）:包含了网页的元数据。如 网页编码格式、标题、描述等 。这部分内容不会出现在可视化页面中。会在网页加载之前加载。下面是最基本的网页头部视图结构 1234567&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; //网页编码格式 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;// 初始化设置 &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge,chrome=1&quot;&gt;//兼容性设置 &lt;meta name=&quot;description&quot; content=&quot;前端小课&quot;&gt;//网站描述 &lt;title &gt;前端小课&lt;/title&gt;//网站标题&lt;/head&gt; 这里需要注意。为什么要用X-UA-Compatible？请参考: X-UA-Compatible的意义使用X-UA-Compatible来设置IE浏览器兼容模式 主体（body）网页的主体展示部分。当进入一个网页，目光所及，都是body的部分（对于没有footer的网页来说），body里的内容，也就是网页的骨架 尾部 （footer）一般来说 比较完善的网页都会有footer 部分。其内存放了一些备案信息和索引、参考链接 友情链接等 一个网页的基本构成如下图所示： 二、HTML标签列表 三、web开发的三驾马车（div + css +js）在web前端开发中,div + css + js这三驾马车分别代表着结构，展示，和交互。本章简单了解下这三个东西是干什么的，具体的会在以后的实践中边学边讲解 DIV在MDN官网是这样介绍的：HTML 元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 或 ) 。简单来说 ，我们可以将div看做是一个里边可以盛放各种标签的矩形容器。 CSSCSS 用于控制网页的样式和布局。MDN官网介绍:层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表 语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。 JavaScriptJavaScript用于实现页面交互。MDN官网介绍JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web 页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，例如 Node.js、 Apache CouchDB 和 Adobe Acrobat。JavaScript 是一种基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。 四、总结这篇文章我们学到了哪些知识？ 网页的基本构成 HTML的各种标签 以及标签的用途 简单了解了DIV 、CSS 、JavaScript的概念]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>Web开发系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一弹 Web开发环境搭建]]></title>
    <url>%2F2019%2F09%2F09%2F%E7%AC%AC%E4%B8%80%E5%BC%B9-Web%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[今天开始从零学习Web,顺便做下积累，以便以后回顾的时候看 ，也为有想学习前端的小伙伴们提供一点借鉴，少走一些坑。相关的文章都会放入WEB开发系列文章中，话不多说，开整吧··· 一、下载VSCode和浏览器(本人学习Web用的是VS)这里附上VSCode官网地址VSCode下载浏览器推荐谷歌浏览器下载地址 二、VSCode使用概览 1234567891011121、资源管理器用于新建、编辑、删除文件或文件夹等操作2、搜索框用于条件搜索3、源代码管理用于源代码管理程序注册4、调试用于调试程序5、扩展/插件 管理插件6、git创建仓储管理 三、安装插件（以汉化插件为例） 安装步骤： 1、点击扩展 进入安装插件界面 2、在应用商店搜索框中输入chinese 3、选取中文简体插件安装 推荐的2款插件1、Live Server2、open in browser 三、 设置文本自动保存 如图。点击设置，选择setting后 显示上图界面 。在界面中输入auto save 默认是关闭状态 选择自动保存模式 设置时间范围 四、写出第一个自己的 hello world操作步骤(三步一张图)： 1、点击资源管理器，新建文件 2、选中文件 右击另存为 选择文件夹目录 将文件存为.html格式3、在文件中输入 ！然后 按tab 键 系统会自动生成一段代码 整体流程如下图所示 接下来继续 1、将title 改为“第一个文件”2、在body中插入标签 文本写第一个hello world!3、右键 选择open with Live Server 执行效果 如下图 至此，大功告成！ 五、总结那么这篇文章我们学到了哪些知识？1、开发环境的搭建和使用2、插件的安装和使用3、文件的创建和调试]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>Web开发系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建免费个人博客详细教程]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一直想做个个人的网站，闲暇时可以写点东西，顺便做点知识积累。最近不太忙，然后鼓捣一通，终于…emm… 话不多说了。还是以这篇文章作为开篇吧,上干货~ 通过Github+Hexo 搭建个人博客一、准备工作开始之前，请确认具备如下条件： 必须有一个github账号：没有的要去注册一个,不做赘述 github官网 电脑里安装了Node：Node官网下载地址 电脑里安装了git: Git官网下载地址 二、搭建GitHub Page网站登录github账号 ，找到repository， 新建一个respository。这里要注意 ： 新建的respository 名字必须叫username.github.io 比如：你的github账号名字叫 admin 那么新建的respository的名字就叫 admin.github.io注意：账号名字不是昵称 要区分开 这里附上GitHub Page官网地址 三、安装Hexo（以Mac 为例，博主用的是Mac）所有必备的应用程序安装完成后。安装Hexo Hexo官网文档 通过如下命令安装Hexo: 1$ npm install -g hexo-cli 安装完Hexo后，执行如下命令： 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 例如，我想创建个名为flydom的文件夹。执行的命令如下 123$ hexo init flydom$ cd flydom$ npm install 执行完成后，在电脑的根目录下会生成相关文件，走到这步，网站初步搭建完成。 四、更改网站的配置信息新建完成后，文件夹下目录结构如下 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 网站的配置参数大部分存储于_config.yml文件中 重要配置（必须修改）： url: 网站地址:https://username.github.io 推送设置（将网站部署到远程github需要） 12345deploy: type: gitrepo: https://github.com/username/username.github.io.gitbranch: mastermessage: 其他配置 title: 标题 subtitle: 副标题 description: 网站描述 author: 开发者 language: 语言 （默认英语 en 汉语为zh-CN） timezone: 时区 默认与电脑同步 常用操作 1234hexo g 重新生成文件hexo d 将网站推送到远程服务器hexo clean 删除网站文件夹hexo s 本地查看效果 五、本地调试&amp; 推送上述更改完成后，执行如下命令 12hexo ghexo s 在浏览器中输入http://localhost:4000 预览效果 无问题执行如下命令： 1hexo d 完成后。https://username.github.io 地址下便可以看到你的博客了。当然 这仅仅是非常粗糙的一个demo 后续功能还需要自己继续优化···]]></content>
      <categories>
        <category>技术积累</category>
      </categories>
      <tags>
        <tag>搭建个人博客</tag>
      </tags>
  </entry>
</search>
